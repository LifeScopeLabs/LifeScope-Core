{
  "{\"filename\":\"/app/scripts/seed.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],null],[[],null],[[],{\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/scripts\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.26.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator",
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "mongodb",
            "imported": [
              "MongoClient"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "MongoClient",
                "local": "MongoClient"
              }
            ]
          },
          {
            "source": "path",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "path"
              }
            ]
          },
          {
            "source": "fs",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "fs"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/scripts/seed.js",
      "filenameRelative": "/app/scripts/seed.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "seed.js",
      "sourceFileName": "seed.js",
      "sourceRoot": "/app/scripts",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/scripts",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "seed"
    },
    "ignored": false,
    "code": "'use strict';\n\nlet run = (() => {\n  var _ref = _asyncToGenerator(function* () {\n    db = yield _mongodb.MongoClient.connect(process.env.MONGODB_URI, { promiseLibrary: Promise });\n\n    console.log(`Starting seed...`);\n\n    const seedFile = _path2.default.resolve('./schema/data/seed.js');\n    try {\n      yield new Promise(function (resolve, reject) {\n        _fs2.default.access(seedFile, _fs2.default.F_OK, function (err) {\n          if (err) reject(err);else resolve();\n        });\n      });\n\n      // $FlowFixMe\n      const seedFn = require(seedFile).default;\n      yield seedFn(db); // eslint-disable-line\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' || e.code === 'ENOENT') {\n        console.log(`  file '${seedFile}' not found. Skipping...`);\n      } else {\n        console.log(e);\n      }\n    }\n\n    console.log('Seed competed!');\n    db.close();\n  });\n\n  return function run() {\n    return _ref.apply(this, arguments);\n  };\n})();\n\nvar _mongodb = require('mongodb');\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n/* eslint-disable no-await-in-loop */\n// This script scans `schema/data` folder for `schema/data/seed.js` files and run them for seeding DB.\n\nlet db;\n\nrun().catch(e => {\n  console.log(e);\n  process.exit(0);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlZWQuanMiXSwibmFtZXMiOlsiZGIiLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwicHJvbWlzZUxpYnJhcnkiLCJQcm9taXNlIiwiY29uc29sZSIsImxvZyIsInNlZWRGaWxlIiwicmVzb2x2ZSIsInJlamVjdCIsImFjY2VzcyIsIkZfT0siLCJlcnIiLCJzZWVkRm4iLCJyZXF1aXJlIiwiZGVmYXVsdCIsImUiLCJjb2RlIiwiY2xvc2UiLCJydW4iLCJjYXRjaCIsImV4aXQiXSwibWFwcGluZ3MiOiI7OzsrQkFXQSxhQUFxQjtBQUNuQkEsU0FBSyxNQUFNLHFCQUFZQyxPQUFaLENBQW9CQyxRQUFRQyxHQUFSLENBQVlDLFdBQWhDLEVBQTZDLEVBQUVDLGdCQUFnQkMsT0FBbEIsRUFBN0MsQ0FBWDs7QUFFQUMsWUFBUUMsR0FBUixDQUFhLGtCQUFiOztBQUVBLFVBQU1DLFdBQVcsZUFBS0MsT0FBTCxDQUFhLHVCQUFiLENBQWpCO0FBQ0EsUUFBSTtBQUNGLFlBQU0sSUFBSUosT0FBSixDQUFZLFVBQUNJLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUNyQyxxQkFBR0MsTUFBSCxDQUFVSCxRQUFWLEVBQW9CLGFBQUdJLElBQXZCLEVBQTZCLGVBQU87QUFDbEMsY0FBSUMsR0FBSixFQUFTSCxPQUFPRyxHQUFQLEVBQVQsS0FDS0o7QUFDTixTQUhEO0FBSUQsT0FMSyxDQUFOOztBQU9BO0FBQ0EsWUFBTUssU0FBU0MsUUFBUVAsUUFBUixFQUFrQlEsT0FBakM7QUFDQSxZQUFNRixPQUFPZixFQUFQLENBQU4sQ0FWRSxDQVVnQjtBQUNuQixLQVhELENBV0UsT0FBT2tCLENBQVAsRUFBVTtBQUNWLFVBQUlBLEVBQUVDLElBQUYsS0FBVyxrQkFBWCxJQUFpQ0QsRUFBRUMsSUFBRixLQUFXLFFBQWhELEVBQTBEO0FBQ3hEWixnQkFBUUMsR0FBUixDQUFhLFdBQVVDLFFBQVMsMEJBQWhDO0FBQ0QsT0FGRCxNQUVPO0FBQ0xGLGdCQUFRQyxHQUFSLENBQVlVLENBQVo7QUFDRDtBQUNGOztBQUVEWCxZQUFRQyxHQUFSLENBQVksZ0JBQVo7QUFDQVIsT0FBR29CLEtBQUg7QUFDRCxHOztrQkEzQmNDLEc7Ozs7O0FBUGY7O0FBRUE7Ozs7QUFDQTs7Ozs7OztBQU5BO0FBQ0E7O0FBT0EsSUFBSXJCLEVBQUo7O0FBK0JBcUIsTUFBTUMsS0FBTixDQUFZSixLQUFLO0FBQ2ZYLFVBQVFDLEdBQVIsQ0FBWVUsQ0FBWjtBQUNBaEIsVUFBUXFCLElBQVIsQ0FBYSxDQUFiO0FBQ0QsQ0FIRCIsImZpbGUiOiJzZWVkLmpzIiwic291cmNlUm9vdCI6Ii9hcHAvc2NyaXB0cyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG4vLyBUaGlzIHNjcmlwdCBzY2FucyBgc2NoZW1hL2RhdGFgIGZvbGRlciBmb3IgYHNjaGVtYS9kYXRhL3NlZWQuanNgIGZpbGVzIGFuZCBydW4gdGhlbSBmb3Igc2VlZGluZyBEQi5cblxuaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5sZXQgZGI7XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgZGIgPSBhd2FpdCBNb25nb0NsaWVudC5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJLCB7IHByb21pc2VMaWJyYXJ5OiBQcm9taXNlIH0pO1xuXG4gIGNvbnNvbGUubG9nKGBTdGFydGluZyBzZWVkLi4uYCk7XG5cbiAgY29uc3Qgc2VlZEZpbGUgPSBwYXRoLnJlc29sdmUoJy4vc2NoZW1hL2RhdGEvc2VlZC5qcycpO1xuICB0cnkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLmFjY2VzcyhzZWVkRmlsZSwgZnMuRl9PSywgZXJyID0+IHtcbiAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgIGVsc2UgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgY29uc3Qgc2VlZEZuID0gcmVxdWlyZShzZWVkRmlsZSkuZGVmYXVsdDtcbiAgICBhd2FpdCBzZWVkRm4oZGIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAnTU9EVUxFX05PVF9GT1VORCcgfHwgZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgY29uc29sZS5sb2coYCAgZmlsZSAnJHtzZWVkRmlsZX0nIG5vdCBmb3VuZC4gU2tpcHBpbmcuLi5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5sb2coJ1NlZWQgY29tcGV0ZWQhJyk7XG4gIGRiLmNsb3NlKCk7XG59XG5cbnJ1bigpLmNhdGNoKGUgPT4ge1xuICBjb25zb2xlLmxvZyhlKTtcbiAgcHJvY2Vzcy5leGl0KDApO1xufSk7Il19",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "seed.js"
      ],
      "names": [
        "db",
        "connect",
        "process",
        "env",
        "MONGODB_URI",
        "promiseLibrary",
        "Promise",
        "console",
        "log",
        "seedFile",
        "resolve",
        "reject",
        "access",
        "F_OK",
        "err",
        "seedFn",
        "require",
        "default",
        "e",
        "code",
        "close",
        "run",
        "catch",
        "exit"
      ],
      "mappings": ";;;+BAWA,aAAqB;AACnBA,SAAK,MAAM,qBAAYC,OAAZ,CAAoBC,QAAQC,GAAR,CAAYC,WAAhC,EAA6C,EAAEC,gBAAgBC,OAAlB,EAA7C,CAAX;;AAEAC,YAAQC,GAAR,CAAa,kBAAb;;AAEA,UAAMC,WAAW,eAAKC,OAAL,CAAa,uBAAb,CAAjB;AACA,QAAI;AACF,YAAM,IAAIJ,OAAJ,CAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACrC,qBAAGC,MAAH,CAAUH,QAAV,EAAoB,aAAGI,IAAvB,EAA6B,eAAO;AAClC,cAAIC,GAAJ,EAASH,OAAOG,GAAP,EAAT,KACKJ;AACN,SAHD;AAID,OALK,CAAN;;AAOA;AACA,YAAMK,SAASC,QAAQP,QAAR,EAAkBQ,OAAjC;AACA,YAAMF,OAAOf,EAAP,CAAN,CAVE,CAUgB;AACnB,KAXD,CAWE,OAAOkB,CAAP,EAAU;AACV,UAAIA,EAAEC,IAAF,KAAW,kBAAX,IAAiCD,EAAEC,IAAF,KAAW,QAAhD,EAA0D;AACxDZ,gBAAQC,GAAR,CAAa,WAAUC,QAAS,0BAAhC;AACD,OAFD,MAEO;AACLF,gBAAQC,GAAR,CAAYU,CAAZ;AACD;AACF;;AAEDX,YAAQC,GAAR,CAAY,gBAAZ;AACAR,OAAGoB,KAAH;AACD,G;;kBA3BcC,G;;;;;AAPf;;AAEA;;;;AACA;;;;;;;AANA;AACA;;AAOA,IAAIrB,EAAJ;;AA+BAqB,MAAMC,KAAN,CAAYJ,KAAK;AACfX,UAAQC,GAAR,CAAYU,CAAZ;AACAhB,UAAQqB,IAAR,CAAa,CAAb;AACD,CAHD",
      "file": "seed.js",
      "sourceRoot": "/app/scripts",
      "sourcesContent": [
        "/* @flow */\n/* eslint-disable no-await-in-loop */\n// This script scans `schema/data` folder for `schema/data/seed.js` files and run them for seeding DB.\n\nimport { MongoClient } from 'mongodb';\n\nimport path from 'path';\nimport fs from 'fs';\n\nlet db;\n\nasync function run() {\n  db = await MongoClient.connect(process.env.MONGODB_URI, { promiseLibrary: Promise });\n\n  console.log(`Starting seed...`);\n\n  const seedFile = path.resolve('./schema/data/seed.js');\n  try {\n    await new Promise((resolve, reject) => {\n      fs.access(seedFile, fs.F_OK, err => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n\n    // $FlowFixMe\n    const seedFn = require(seedFile).default;\n    await seedFn(db); // eslint-disable-line\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND' || e.code === 'ENOENT') {\n      console.log(`  file '${seedFile}' not found. Skipping...`);\n    } else {\n      console.log(e);\n    }\n  }\n\n  console.log('Seed competed!');\n  db.close();\n}\n\nrun().catch(e => {\n  console.log(e);\n  process.exit(0);\n});"
      ]
    },
    "mtime": 1521190068267
  },
  "{\"filename\":\"/app/schema/data/seed.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],null],[[],null],[[],{\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}],[[],{\"spec\":false,\"loose\":false}]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/schema/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.26.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator",
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "fs",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "fs"
              }
            ]
          },
          {
            "source": "mongodb",
            "imported": [
              "ObjectID"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "ObjectID",
                "local": "ObjectID"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/schema/data/seed.js",
      "filenameRelative": "/app/schema/data/seed.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ],
        [
          [],
          {
            "spec": false,
            "loose": false
          }
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "seed.js",
      "sourceFileName": "seed.js",
      "sourceRoot": "/app/schema/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/schema/data",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "seed"
    },
    "ignored": false,
    "code": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _mongodb = require('mongodb');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nconst collectionPrefix = 'user_';\n\nexports.default = (() => {\n  var _ref = _asyncToGenerator(function* (db) {\n    const files = ['users'];\n\n    const collectionNames = (yield db.listCollections().toArray()).map(function (o) {\n      return o.name;\n    });\n\n    return Promise.all(files.map(function (file) {\n      return _asyncToGenerator(function* () {\n        const colName = `${collectionPrefix || ''}${file}`;\n        const data = JSON.parse(_fs2.default.readFileSync(`${__dirname}/${file}.json`, 'utf8'));\n        data.forEach(function (d, i) {\n          data[i]._id = _mongodb.ObjectID.createFromHexString(data[i]._id);\n        });\n        if (collectionNames.indexOf(colName) > -1) {\n          console.log(`  '${colName}' dropped`);\n          yield db.dropCollection(colName);\n        }\n        const result = yield db.collection(colName).insertMany(data);\n        console.log(`  '${colName}' created with ${result.insertedCount} records`);\n      })();\n    }));\n  });\n\n  function seed(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return seed;\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlZWQuanMiXSwibmFtZXMiOlsiY29sbGVjdGlvblByZWZpeCIsImRiIiwiZmlsZXMiLCJjb2xsZWN0aW9uTmFtZXMiLCJsaXN0Q29sbGVjdGlvbnMiLCJ0b0FycmF5IiwibWFwIiwibyIsIm5hbWUiLCJQcm9taXNlIiwiYWxsIiwiY29sTmFtZSIsImZpbGUiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwiX19kaXJuYW1lIiwiZm9yRWFjaCIsImQiLCJpIiwiX2lkIiwiY3JlYXRlRnJvbUhleFN0cmluZyIsImluZGV4T2YiLCJjb25zb2xlIiwibG9nIiwiZHJvcENvbGxlY3Rpb24iLCJyZXN1bHQiLCJjb2xsZWN0aW9uIiwiaW5zZXJ0TWFueSIsImluc2VydGVkQ291bnQiLCJzZWVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxtQkFBbUIsT0FBekI7OzsrQkFFZSxXQUFvQkMsRUFBcEIsRUFBNkI7QUFDMUMsVUFBTUMsUUFBUSxDQUFDLE9BQUQsQ0FBZDs7QUFFQSxVQUFNQyxrQkFBa0IsQ0FBQyxNQUFNRixHQUFHRyxlQUFILEdBQXFCQyxPQUFyQixFQUFQLEVBQXVDQyxHQUF2QyxDQUEyQztBQUFBLGFBQUtDLEVBQUVDLElBQVA7QUFBQSxLQUEzQyxDQUF4Qjs7QUFFQSxXQUFPQyxRQUFRQyxHQUFSLENBQ0xSLE1BQU1JLEdBQU4sQ0FBVSxnQkFBUTtBQUNoQixhQUFPLGtCQUFDLGFBQWlCO0FBQ3ZCLGNBQU1LLFVBQVcsR0FBRVgsb0JBQW9CLEVBQUcsR0FBRVksSUFBSyxFQUFqRDtBQUNBLGNBQU1DLE9BQU9DLEtBQUtDLEtBQUwsQ0FBVyxhQUFHQyxZQUFILENBQWlCLEdBQUVDLFNBQVUsSUFBR0wsSUFBSyxPQUFyQyxFQUE2QyxNQUE3QyxDQUFYLENBQWI7QUFDQUMsYUFBS0ssT0FBTCxDQUFhLFVBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQ3JCUCxlQUFLTyxDQUFMLEVBQVFDLEdBQVIsR0FBYyxrQkFBU0MsbUJBQVQsQ0FBNkJULEtBQUtPLENBQUwsRUFBUUMsR0FBckMsQ0FBZDtBQUNELFNBRkQ7QUFHQSxZQUFJbEIsZ0JBQWdCb0IsT0FBaEIsQ0FBd0JaLE9BQXhCLElBQW1DLENBQUMsQ0FBeEMsRUFBMkM7QUFDekNhLGtCQUFRQyxHQUFSLENBQWEsTUFBS2QsT0FBUSxXQUExQjtBQUNBLGdCQUFNVixHQUFHeUIsY0FBSCxDQUFrQmYsT0FBbEIsQ0FBTjtBQUNEO0FBQ0QsY0FBTWdCLFNBQVMsTUFBTTFCLEdBQUcyQixVQUFILENBQWNqQixPQUFkLEVBQXVCa0IsVUFBdkIsQ0FBa0NoQixJQUFsQyxDQUFyQjtBQUNBVyxnQkFBUUMsR0FBUixDQUFhLE1BQUtkLE9BQVEsa0JBQWlCZ0IsT0FBT0csYUFBYyxVQUFoRTtBQUNELE9BWk0sR0FBUDtBQWFELEtBZEQsQ0FESyxDQUFQO0FBaUJELEc7O1dBdEI2QkMsSTs7OztTQUFBQSxJIiwiZmlsZSI6InNlZWQuanMiLCJzb3VyY2VSb290IjoiL2FwcC9zY2hlbWEvZGF0YSIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBPYmplY3RJRCB9IGZyb20gJ21vbmdvZGInO1xuXG5jb25zdCBjb2xsZWN0aW9uUHJlZml4ID0gJ3VzZXJfJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc2VlZChkYjogYW55KSB7XG4gIGNvbnN0IGZpbGVzID0gWyd1c2VycyddO1xuXG4gIGNvbnN0IGNvbGxlY3Rpb25OYW1lcyA9IChhd2FpdCBkYi5saXN0Q29sbGVjdGlvbnMoKS50b0FycmF5KCkpLm1hcChvID0+IG8ubmFtZSk7XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGZpbGVzLm1hcChmaWxlID0+IHtcbiAgICAgIHJldHVybiAoYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGNvbE5hbWUgPSBgJHtjb2xsZWN0aW9uUHJlZml4IHx8ICcnfSR7ZmlsZX1gO1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoYCR7X19kaXJuYW1lfS8ke2ZpbGV9Lmpzb25gLCAndXRmOCcpKTtcbiAgICAgICAgZGF0YS5mb3JFYWNoKChkLCBpKSA9PiB7XG4gICAgICAgICAgZGF0YVtpXS5faWQgPSBPYmplY3RJRC5jcmVhdGVGcm9tSGV4U3RyaW5nKGRhdGFbaV0uX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uTmFtZXMuaW5kZXhPZihjb2xOYW1lKSA+IC0xKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYCAgJyR7Y29sTmFtZX0nIGRyb3BwZWRgKTtcbiAgICAgICAgICBhd2FpdCBkYi5kcm9wQ29sbGVjdGlvbihjb2xOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKGNvbE5hbWUpLmluc2VydE1hbnkoZGF0YSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgICcke2NvbE5hbWV9JyBjcmVhdGVkIHdpdGggJHtyZXN1bHQuaW5zZXJ0ZWRDb3VudH0gcmVjb3Jkc2ApO1xuICAgICAgfSkoKTtcbiAgICB9KVxuICApO1xufSJdfQ==",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "seed.js"
      ],
      "names": [
        "collectionPrefix",
        "db",
        "files",
        "collectionNames",
        "listCollections",
        "toArray",
        "map",
        "o",
        "name",
        "Promise",
        "all",
        "colName",
        "file",
        "data",
        "JSON",
        "parse",
        "readFileSync",
        "__dirname",
        "forEach",
        "d",
        "i",
        "_id",
        "createFromHexString",
        "indexOf",
        "console",
        "log",
        "dropCollection",
        "result",
        "collection",
        "insertMany",
        "insertedCount",
        "seed"
      ],
      "mappings": ";;;;;;AAEA;;;;AACA;;;;;;AAEA,MAAMA,mBAAmB,OAAzB;;;+BAEe,WAAoBC,EAApB,EAA6B;AAC1C,UAAMC,QAAQ,CAAC,OAAD,CAAd;;AAEA,UAAMC,kBAAkB,CAAC,MAAMF,GAAGG,eAAH,GAAqBC,OAArB,EAAP,EAAuCC,GAAvC,CAA2C;AAAA,aAAKC,EAAEC,IAAP;AAAA,KAA3C,CAAxB;;AAEA,WAAOC,QAAQC,GAAR,CACLR,MAAMI,GAAN,CAAU,gBAAQ;AAChB,aAAO,kBAAC,aAAiB;AACvB,cAAMK,UAAW,GAAEX,oBAAoB,EAAG,GAAEY,IAAK,EAAjD;AACA,cAAMC,OAAOC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAiB,GAAEC,SAAU,IAAGL,IAAK,OAArC,EAA6C,MAA7C,CAAX,CAAb;AACAC,aAAKK,OAAL,CAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrBP,eAAKO,CAAL,EAAQC,GAAR,GAAc,kBAASC,mBAAT,CAA6BT,KAAKO,CAAL,EAAQC,GAArC,CAAd;AACD,SAFD;AAGA,YAAIlB,gBAAgBoB,OAAhB,CAAwBZ,OAAxB,IAAmC,CAAC,CAAxC,EAA2C;AACzCa,kBAAQC,GAAR,CAAa,MAAKd,OAAQ,WAA1B;AACA,gBAAMV,GAAGyB,cAAH,CAAkBf,OAAlB,CAAN;AACD;AACD,cAAMgB,SAAS,MAAM1B,GAAG2B,UAAH,CAAcjB,OAAd,EAAuBkB,UAAvB,CAAkChB,IAAlC,CAArB;AACAW,gBAAQC,GAAR,CAAa,MAAKd,OAAQ,kBAAiBgB,OAAOG,aAAc,UAAhE;AACD,OAZM,GAAP;AAaD,KAdD,CADK,CAAP;AAiBD,G;;WAtB6BC,I;;;;SAAAA,I",
      "file": "seed.js",
      "sourceRoot": "/app/schema/data",
      "sourcesContent": [
        "/* @flow */\n\nimport fs from 'fs';\nimport { ObjectID } from 'mongodb';\n\nconst collectionPrefix = 'user_';\n\nexport default async function seed(db: any) {\n  const files = ['users'];\n\n  const collectionNames = (await db.listCollections().toArray()).map(o => o.name);\n\n  return Promise.all(\n    files.map(file => {\n      return (async function() {\n        const colName = `${collectionPrefix || ''}${file}`;\n        const data = JSON.parse(fs.readFileSync(`${__dirname}/${file}.json`, 'utf8'));\n        data.forEach((d, i) => {\n          data[i]._id = ObjectID.createFromHexString(data[i]._id);\n        });\n        if (collectionNames.indexOf(colName) > -1) {\n          console.log(`  '${colName}' dropped`);\n          await db.dropCollection(colName);\n        }\n        const result = await db.collection(colName).insertMany(data);\n        console.log(`  '${colName}' created with ${result.insertedCount} records`);\n      })();\n    })\n  );\n}"
      ]
    },
    "mtime": 1521190125597
  }
}